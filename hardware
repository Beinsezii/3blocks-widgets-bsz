#! /usr/bin/env bash

RATE=${RATE:-"1.0"}
THERMAL_FLOOR=${THERMAL_FLOOR:-25}
CPU_CLOCKS=${CPU_CLOCKS:-false}
CPU_THERMALS=${CPU_THERMALS:-false}
CPU_THERMAL_CEIL=${CPU_THERMAL_CEIL:-100}
GPU=${GPU:-true}
GPU_ID=${GPU_ID:-0}
GPU_CLOCKS=${GPU_THERMALS:-false}
GPU_THERMALS=${GPU_THERMALS:-false}
GPU_POWER=${GPU_POWER:-false}
SEPARATOR=${SEPARATOR:-"]["}
SEPARATOR_SHORT=${SEPARATOR_SHORT:-" "}
SEPARATOR_CLOCK=${SEPARATOR_THERMAL:-" ∿"}
SEPARATOR_THERMAL=${SEPARATOR_THERMAL:-" °"}
SEPARATOR_POWER=${SEPARATOR_POWER:-" ⌁"}
PREFIX=${PREFIX:-"["}
SUFFIX=${SUFFIX:-"]"}
PREFIX_SHORT=${PREFIX_SHORT:-""}
SUFFIX_SHORT=${SUFFIX_SHORT:-""}

### HEATCOLORS ### {{{
# fn main() {
#     for hue in 0..100 {
#         let hue = hue as f32;
#         let huef: f32 = 210.0 - (hue * (180.0 / 99.0));
#         let mut pixel = [60.0, 75.0, huef];
#         colcon::hk_comp_2023(&mut pixel);
#         colcon::convert_space(colcon::Space::LCH, colcon::Space::SRGB, &mut pixel);
#         println!("\"{}\"", colcon::irgb_to_hex(colcon::srgb_to_irgb(pixel)))
#     }
# }
HEATCOLORS=(

"#00AFD2"
"#00AFCF"
"#00AFCB"
"#00B0C8"
"#00B0C4"
"#00B1C0"
"#00B1BD"
"#00B1B9"
"#00B2B5"
"#00B2B1"
"#00B2AE"
"#00B3AA"
"#00B3A6"
"#00B3A2"
"#00B49E"
"#00B49A"
"#00B497"
"#00B493"
"#00B58F"
"#00B58B"
"#00B587"
"#00B583"
"#00B57F"
"#00B67B"
"#00B678"
"#00B674"
"#00B670"
"#00B66C"
"#00B668"
"#00B765"
"#00B761"
"#00B75D"
"#00B75A"
"#00B756"
"#00B752"
"#00B74F"
"#14B74B"
"#27B747"
"#33B744"
"#3DB740"
"#46B73D"
"#4EB739"
"#55B735"
"#5CB632"
"#63B62E"
"#69B62B"
"#6FB627"
"#74B523"
"#7AB51F"
"#7FB51C"
"#84B517"
"#8AB413"
"#8FB40F"
"#94B309"
"#98B304"
"#9DB200"
"#A2B200"
"#A7B100"
"#ABB100"
"#B0B000"
"#B5AF00"
"#B9AF00"
"#BDAE00"
"#C2AD00"
"#C6AC00"
"#CBAC00"
"#CDA900"
"#D0A700"
"#D2A400"
"#D4A100"
"#D59E00"
"#D79B00"
"#D99800"
"#DB9600"
"#DC9300"
"#DE9000"
"#E08D00"
"#E18A03"
"#E38707"
"#E4840B"
"#E58110"
"#E67E13"
"#E87B17"
"#E9781A"
"#EA751D"
"#EB7120"
"#EC6E23"
"#ED6B26"
"#ED6829"
"#EE652C"
"#EF622F"
"#EF5F32"
"#F05C35"
"#F15938"
"#F1563A"
"#F1533D"
"#F25040"
"#F24D43"
"#F24A46"
"#F24749"

)
### HEATCOLORS ### }}}

# $1 percent (index)
function heatmap {
    count=${#HEATCOLORS[@]}
    count=$count-1
    last=${HEATCOLORS[$count]}
    unset ${HEATCOLORS[$count]}
    scale=$((100 / count))
    x=0
    for c in ${HEATCOLORS[@]}; do
        if [ $1 -lt $((scale * x)) ]; then
            echo -n " color=\"$c\""
            return
        fi
        x=$x+1
    done
    echo -n " color=\"$last\""
}


# $1 card $2 temp
function gputherm {
    awk '
    {
        floor='$THERMAL_FLOOR'
        current=$1 / 1000;
        getline;
        critical=$1 / 1000;
        printf "%d %d", current, ((current - floor) / (critical - floor) ) * 100
    }
    ' /sys/class/drm/card${1}/device/hwmon/hwmon*/temp${2}_input /sys/class/drm/card${1}/device/hwmon/hwmon*/temp${2}_crit
}

# $1 card $2 freq
function gpufreq {
    label=`cat /sys/class/drm/card${1}/device/hwmon/hwmon*/freq${2}_label`

    read freq_max <<< $(awk '
    BEGIN {max=100}
    {val = strtonum(substr($2, 0, length($2)-3)); if (val > max) {max=val}}
    END {printf "%d", max}
    ' /sys/class/drm/card${1}/device/pp_dpm_${label})

    awk '
    {
        current=$1 / 1000000;
        printf "%d %d", current, (current / '$freq_max') * 100
    }
    ' /sys/class/drm/card${1}/device/hwmon/hwmon*/freq${2}_input
}

output_long=""
output_short=""


### GPU ### {{{
if $GPU; then

    gpu_util=$(cat /sys/class/drm/card$GPU_ID/device/gpu_busy_percent)

    read vram_used vram_total vram_percent <<< $( awk '
    {
        used=$1;
        getline;
        total=$1;
        printf "%.1f %.1f %.1f", used/1024/1024/1024, total/1024/1024/1024, used/total*100
    }' /sys/class/drm/card$GPU_ID/device/mem_info_vram_used /sys/class/drm/card$GPU_ID/device/mem_info_vram_total )

    gpu_color=$(heatmap ${gpu_util%.*})
    vram_color=$(heatmap ${vram_percent%.*})

    if $GPU_CLOCKS; then
        read core_freq core_freq_percent <<< `gpufreq $GPU_ID 1`
        read mem_freq mem_freq_percent <<< `gpufreq $GPU_ID 2`
        freq_core="$SEPARATOR_CLOCK<span$(heatmap ${core_freq_percent})>$core_freq</span>"
        freq_mem="$SEPARATOR_CLOCK<span$(heatmap ${mem_freq_percent})>$mem_freq</span>"
    fi

    if $GPU_THERMALS; then

        read core core_percent <<< `gputherm $GPU_ID 1`
        read junc junc_percent <<< `gputherm $GPU_ID 2`
        read mem mem_percent <<< `gputherm $GPU_ID 3`

        therm_die="$SEPARATOR_THERMAL<span$(heatmap ${core_percent})>$core</span>/<span$(heatmap ${junc_percent})>$junc</span>"
        therm_mem="$SEPARATOR_THERMAL<span$(heatmap ${mem_percent})>$mem</span>"

    fi

    if $GPU_POWER; then

        read pow pow_percent <<< $(awk '
        {
        current=$1 / 1000000;
        getline;
        cap=$1 / 1000000;
        printf "%d %d", current, (current / cap) * 100
        }
        ' /sys/class/drm/card$GPU_ID/device/hwmon/hwmon*/power1_average /sys/class/drm/card$GPU_ID/device/hwmon/hwmon*/power1_cap)

        gpu_power="$SEPARATOR_POWER<span$(heatmap ${pow_percent})>$pow</span>"

    fi


    output_long+="3D: <span$gpu_color>$gpu_util%</span>$freq_core$therm_die$gpu_power${SEPARATOR}VRAM: <span$vram_color>$vram_used / $vram_total</span>$freq_mem$therm_mem$SEPARATOR"
    output_short+="3D: <span$gpu_color>$gpu_util%</span>$freq_core$therm_die$gpu_power${SEPARATOR_SHORT}VRAM: <span$vram_color>$vram_percent%</span>$freq_mem$therm_mem$SEPARATOR_SHORT"

fi
### GPU ### }}}


### MEM ### {{{
read mem_used mem_total mem_percent <<< $(awk '
/MemTotal:/ {total = $2/1024/1024}
/MemAvailable:/ {
    used = total-$2/1024/1024;
    printf "%.1f %.1f %.1f", used, total, used/total*100
}' /proc/meminfo)

mem_color=$(heatmap ${mem_percent%.*})
output_long+="MEM: <span$mem_color>$mem_used / $mem_total</span>$SEPARATOR"
output_short+="MEM: <span$mem_color>$mem_percent%</span>$SEPARATOR_SHORT"
### MEM ### }}}


### CPU ### {{{
read cpu_util cores <<< $(awk '
/cpu / {
    if (iter==1) {
        used_base=used
        idle_base=idle
        total_base=total
    };
    used=$2+$3+$4
    idle=$5
    total=used+idle
    iter=1
}
END {
    cores=(NR-2)/2
    printf "%.1f %d", (used - used_base) / (total-total_base) * 100 * cores, cores
}
' <(grep 'cpu' /proc/stat) <(sleep $RATE; grep 'cpu' /proc/stat))

if $CPU_THERMALS; then
    # maybe it should be temp* ?
    for f in /sys/class/hwmon/hwmon*/temp1_label; do
        if [ "`cat $f`" == "Tctl" ]; then
            read cpu_tctl cpu_tctl_percent <<< $(awk '
            {
            floor='$THERMAL_FLOOR' * 1000;
            printf "%d %d", $1 / 1000, ($1 - floor) / ('$CPU_THERMAL_CEIL' * 1000 - floor) * 100
            }
            ' ${f%_label}_input)
            cpu_temp="$SEPARATOR_THERMAL<span$(heatmap $cpu_tctl_percent)>$cpu_tctl</span>"
            break
        fi
    done
fi

if $CPU_CLOCKS; then
    max=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq`

    read avg_freq avg_freq_percent top_freq top_freq_percent <<< $(awk '
BEGIN { avg=0; top=0; iter=0 }

{
    freq = $1 / 1000;
    avg = avg + freq;
    if (freq > top) {top=freq};
        iter++
}

END {
    max = '$max' / 1000;
    avg = avg / iter;
    printf "%d %d %d %d", avg, (avg / max) * 100, top, (top / max) * 100
}' /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq)

    cpu_freq="$SEPARATOR_CLOCK<span$(heatmap $avg_freq_percent)>$avg_freq</span>"
fi

cpu_color=$(heatmap $((${cpu_util%.*} / cores )))
output_long+="CPU: <span$cpu_color>$cpu_util%</span>$cpu_freq$cpu_temp"
output_short+="CPU: <span$cpu_color>$cpu_util%</span>$cpu_freq$cpu_temp"
### CPU ### }}}

echo $PREFIX$output_long$SUFFIX
echo $PREFIX_SHORT$output_short$SUFFIX_SHORT
exit 0

#! /usr/bin/env bash

RATE=${RATE:-"1.0"}
THERMAL_FLOOR=${THERMAL_FLOOR:-25}
TEXT=${TEXT:-false}
CPU=${CPU:-true}
CPU_CLOCKS=${CPU_CLOCKS:-false}
CPU_THERMALS=${CPU_THERMALS:-false}
CPU_THERMAL_CEIL=${CPU_THERMAL_CEIL:-100}
MEM=${MEM:-true}
GPU=${GPU:-true}
GPU_ID=${GPU_ID:-1}
GPU_CLOCKS=${GPU_THERMALS:-false}
GPU_THERMALS=${GPU_THERMALS:-false}
GPU_POWER=${GPU_POWER:-false}
SEPARATOR=${SEPARATOR:-"]["}
SEPARATOR_SHORT=${SEPARATOR_SHORT:-" "}
SEPARATOR_CLOCK=${SEPARATOR_THERMAL:-" ∿"}
SEPARATOR_THERMAL=${SEPARATOR_THERMAL:-" °"}
SEPARATOR_POWER=${SEPARATOR_POWER:-" ⌁"}
PREFIX=${PREFIX:-"["}
SUFFIX=${SUFFIX:-"]"}
PREFIX_SHORT=${PREFIX_SHORT:-""}
SUFFIX_SHORT=${SUFFIX_SHORT:-""}

### HEATCOLORS ### {{{
# fn main() {
#     for hue in 0..100 {
#         let space = colcon::Space::JZCZHZ;
#         let mut pixel = [
#             0.5 * space.srgb_quant100()[0],
#             0.7 * space.srgb_quant95()[1],
#             255.0 - (hue as f32 * (230.0 / 99.0))
#         ];
#         colcon::convert_space(space, colcon::Space::SRGB, &mut pixel);
#         println!("\"{}\"", colcon::irgb_to_hex(colcon::srgb_to_irgb(pixel)))
#     }
# }
HEATCOLORS=(

"#539BEE"
"#4A9EED"
"#3FA0EC"
"#32A2EB"
"#20A5EA"
"#00A7E9"
"#00A9E8"
"#00ABE6"
"#00ADE5"
"#00AFE3"
"#00B1E1"
"#00B3DF"
"#00B5DD"
"#00B7DB"
"#00B8D9"
"#00BAD6"
"#00BCD4"
"#00BDD1"
"#00BFCF"
"#00C0CC"
"#00C1C9"
"#00C2C6"
"#00C4C3"
"#00C5C0"
"#00C6BD"
"#00C6B9"
"#00C7B6"
"#00C8B2"
"#00C9AF"
"#00C9AB"
"#00CAA7"
"#00CAA4"
"#00CBA0"
"#00CB9C"
"#00CB98"
"#00CB94"
"#00CB8F"
"#00CB8B"
"#00CB87"
"#00CB83"
"#00CA7E"
"#00CA7A"
"#00C975"
"#00C971"
"#00C86C"
"#00C767"
"#00C762"
"#00C65D"
"#00C558"
"#1FC453"
"#32C34E"
"#3FC148"
"#4AC043"
"#54BF3D"
"#5DBD37"
"#64BC30"
"#6CBA29"
"#73B921"
"#79B718"
"#7FB50A"
"#85B400"
"#8BB200"
"#90B000"
"#95AE00"
"#9AAC00"
"#9FAA00"
"#A3A800"
"#A7A600"
"#ACA300"
"#B0A100"
"#B39F00"
"#B79C00"
"#BB9A00"
"#BE9800"
"#C29500"
"#C59300"
"#C89000"
"#CB8E00"
"#CD8B00"
"#D08900"
"#D38600"
"#D58400"
"#D88100"
"#DA7F08"
"#DC7C15"
"#DE791F"
"#E07727"
"#E1742D"
"#E37234"
"#E56F3A"
"#E66D3F"
"#E76A44"
"#E9674A"
"#EA654F"
"#EB6353"
"#EC6058"
"#EC5E5D"
"#ED5C61"
"#EE5966"
"#EE576A"

)
### HEATCOLORS ### }}}

# $1 percent (index)
function heatmap {
    count=${#HEATCOLORS[@]}
    count=$count-1
    last=${HEATCOLORS[$count]}
    unset ${HEATCOLORS[$count]}
    scale=$((100 / count))
    x=0
    for c in ${HEATCOLORS[@]}; do
        if [[ $1 -lt $((scale * x)) ]]; then
            echo -n " color=\"$c\""
            return
        fi
        x=$x+1
    done
    echo -n " color=\"$last\""
}


# $1 card $2 temp
function gputherm {
    awk '
    {
        floor='$THERMAL_FLOOR'
        current=$1 / 1000;
        getline;
        critical=$1 / 1000;
        printf "%d %d", current, ((current - floor) / (critical - floor) ) * 100
    }
    ' /sys/class/drm/card${1}/device/hwmon/hwmon*/temp${2}_input /sys/class/drm/card${1}/device/hwmon/hwmon*/temp${2}_crit
}

# $1 card $2 freq
function gpufreq {
    label=`cat /sys/class/drm/card${1}/device/hwmon/hwmon*/freq${2}_label`

    read freq_max <<< $(awk '
    BEGIN {max=100}
    {val = strtonum(substr($2, 0, length($2)-3)); if (val > max) {max=val}}
    END {printf "%d", max}
    ' /sys/class/drm/card${1}/device/pp_dpm_${label})

    awk '
    {
        current=$1 / 1000000;
        printf "%d %d", current, (current / '$freq_max') * 100
    }
    ' /sys/class/drm/card${1}/device/hwmon/hwmon*/freq${2}_input
}

output_long=""
output_short=""


### GPU ### {{{
if $GPU; then

    gpu_util=$(cat /sys/class/drm/card$GPU_ID/device/gpu_busy_percent)

    read vram_used vram_total vram_percent <<< $( awk '
    {
        used=$1;
        getline;
        total=$1;
        printf "%.1f %.1f %.1f", used/1024/1024/1024, total/1024/1024/1024, used/total*100
    }' /sys/class/drm/card$GPU_ID/device/mem_info_vram_used /sys/class/drm/card$GPU_ID/device/mem_info_vram_total )

    if $GPU_CLOCKS; then
        read core_freq core_freq_percent <<< `gpufreq $GPU_ID 1`
        read mem_freq mem_freq_percent <<< `gpufreq $GPU_ID 2`
        if ! $TEXT ; then
            freq_core="$SEPARATOR_CLOCK<span$(heatmap ${core_freq_percent})>$core_freq</span>"
            freq_mem="$SEPARATOR_CLOCK<span$(heatmap ${mem_freq_percent})>$mem_freq</span>"
        else
            freq_core="$SEPARATOR_CLOCK$core_freq"
            freq_mem="$SEPARATOR_CLOCK$mem_freq"
        fi
    fi

    if $GPU_THERMALS; then

        read core core_percent <<< `gputherm $GPU_ID 1`
        read junc junc_percent <<< `gputherm $GPU_ID 2`
        read mem mem_percent <<< `gputherm $GPU_ID 3`

        if ! $TEXT ; then
            therm_die="$SEPARATOR_THERMAL<span$(heatmap ${core_percent})>$core</span>/<span$(heatmap ${junc_percent})>$junc</span>"
            therm_mem="$SEPARATOR_THERMAL<span$(heatmap ${mem_percent})>$mem</span>"
        else
            therm_die="$SEPARATOR_THERMAL$core/$junc"
            therm_mem="$SEPARATOR_THERMAL$mem"
        fi

    fi

    if $GPU_POWER; then

        read pow pow_percent <<< $(awk '
        {
        current=$1 / 1000000;
        getline;
        cap=$1 / 1000000;
        printf "%d %d", current, (current / cap) * 100
        }
        ' /sys/class/drm/card$GPU_ID/device/hwmon/hwmon*/power1_average /sys/class/drm/card$GPU_ID/device/hwmon/hwmon*/power1_cap)

        if ! $TEXT ; then
            gpu_power="$SEPARATOR_POWER<span$(heatmap ${pow_percent})>$pow</span>"
        else
            gpu_power="$SEPARATOR_POWER$pow"
        fi

    fi


    if ! $TEXT; then
        gpu_color=$(heatmap ${gpu_util%.*})
        vram_color=$(heatmap ${vram_percent%.*})
        output_long+="3D: <span$gpu_color>$gpu_util%</span>$freq_core$therm_die$gpu_power${SEPARATOR}VRAM: <span$vram_color>$vram_used / $vram_total</span>$freq_mem$therm_mem"
        output_short+="3D: <span$gpu_color>$gpu_util%</span>$freq_core$therm_die$gpu_power${SEPARATOR_SHORT}VRAM: <span$vram_color>$vram_percent%</span>$freq_mem$therm_mem"
    else
        output_long+="3D: $gpu_util%$freq_core$therm_die$gpu_power${SEPARATOR}VRAM: $vram_used / $vram_total$freq_mem$therm_mem"
        output_short+="3D: $gpu_util%$freq_core$therm_die$gpu_power${SEPARATOR_SHORT}VRAM: $vram_percent%$freq_mem$therm_mem"
    fi

fi
### GPU ### }}}


### MEM ### {{{
if $MEM; then
    if $GPU ; then
        output_long+="$SEPARATOR"
        output_short+="$SEPARATOR_SHORT"
    fi
    read mem_used mem_total mem_percent <<< $(awk '
    /MemTotal:/ {total = $2/1024/1024}
    /MemAvailable:/ {
        used = total-$2/1024/1024;
        printf "%.1f %.1f %.1f", used, total, used/total*100
    }' /proc/meminfo)

    if ! $TEXT ; then
        mem_color=$(heatmap ${mem_percent%.*})
        output_long+="MEM: <span$mem_color>$mem_used / $mem_total</span>"
        output_short+="MEM: <span$mem_color>$mem_percent%</span>"
    else
        output_long+="MEM: $mem_used / $mem_total"
        output_short+="MEM: $mem_percent%"
    fi
fi
### MEM ### }}}


### CPU ### {{{
if $CPU; then
    if $GPU || $MEM ; then
        output_long+="$SEPARATOR"
        output_short+="$SEPARATOR_SHORT"
    fi
    read cpu_util cores <<< $(awk '
    /cpu / {
        if (iter==1) {
            used_base=used
            idle_base=idle
            total_base=total
        };
        used=$2+$3+$4
        idle=$5
        total=used+idle
        iter=1
    }
    END {
        cores=(NR-2)/2
        printf "%.1f %d", (used - used_base) / (total-total_base) * 100 * cores, cores
    }
    ' <(grep 'cpu' /proc/stat) <(sleep $RATE; grep 'cpu' /proc/stat))

    if $CPU_THERMALS; then
        # maybe it should be temp* ?
        for f in /sys/class/hwmon/hwmon*/temp1_label; do
            if [ "`cat $f`" == "Tctl" ]; then
                read cpu_tctl cpu_tctl_percent <<< $(awk '
                {
                floor='$THERMAL_FLOOR' * 1000;
                printf "%d %d", $1 / 1000, ($1 - floor) / ('$CPU_THERMAL_CEIL' * 1000 - floor) * 100
                }
                ' ${f%_label}_input)

                if ! $TEXT ; then
                    cpu_temp="$SEPARATOR_THERMAL<span$(heatmap $cpu_tctl_percent)>$cpu_tctl</span>"
                else
                    cpu_temp="$SEPARATOR_THERMAL$cpu_tctl"
                fi

                break
            fi
        done
    fi

    if $CPU_CLOCKS; then
        max=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq`

        read avg_freq avg_freq_percent top_freq top_freq_percent <<< $(awk '
    BEGIN { avg=0; top=0; iter=0 }

    {
        freq = $1 / 1000;
        avg = avg + freq;
        if (freq > top) {top=freq};
            iter++
    }

    END {
        max = '$max' / 1000;
        avg = avg / iter;
        printf "%d %d %d %d", avg, (avg / max) * 100, top, (top / max) * 100
    }' /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq)

        if ! $TEXT ; then
            cpu_freq="$SEPARATOR_CLOCK<span$(heatmap $avg_freq_percent)>$avg_freq</span>"
        else
            cpu_freq="$SEPARATOR_CLOCK$avg_freq"
        fi
    fi

    if ! $TEXT ; then
        cpu_color=$(heatmap $((${cpu_util%.*} / cores )))
        output_long+="CPU: <span$cpu_color>$cpu_util%</span>$cpu_freq$cpu_temp"
        output_short+="CPU: <span$cpu_color>$cpu_util%</span>$cpu_freq$cpu_temp"
    else
        output_long+="CPU: $cpu_util%$cpu_freq$cpu_temp"
        output_short+="CPU: $cpu_util%$cpu_freq$cpu_temp"
    fi
else
    sleep $RATE
fi
### CPU ### }}}

echo $PREFIX$output_long$SUFFIX
echo $PREFIX_SHORT$output_short$SUFFIX_SHORT
exit 0
